
#判断一个列表是不是另一个列表的子集：
>>> xulie1=[12,14]
>>> xulie2=[11,12,13,14,15,"CN","RU"]
>>> xulie3=[j for j in xulie1 if j in xulie2]
>>> xulie3
[12, 14]

--------------------------------
>>> s='hello'
>>> L=[1,2,3,'a','b']
>>> t=(7,8,9,"x","y")
>>> d={'A':100,'B':200,"E":500,'C':300,"D":400}
>>> d2={}
>>> for m in L:
	for n in t:
		d2[m]=n        #将L的元素作为字典d2的key，将t的元素作为d2的value
		print d2		#这会依次打印执行过程，没必要！！！

		
{1: 7}
{1: 8}
{1: 9}
{1: 'x'}
{1: 'y'}
{1: 'y', 2: 7}
{1: 'y', 2: 8}
{1: 'y', 2: 9}
{1: 'y', 2: 'x'}
{1: 'y', 2: 'y'}
{1: 'y', 2: 'y', 3: 7}
{1: 'y', 2: 'y', 3: 8}
{1: 'y', 2: 'y', 3: 9}
{1: 'y', 2: 'y', 3: 'x'}
{1: 'y', 2: 'y', 3: 'y'}
{'a': 7, 1: 'y', 2: 'y', 3: 'y'}
{'a': 8, 1: 'y', 2: 'y', 3: 'y'}
{'a': 9, 1: 'y', 2: 'y', 3: 'y'}
{'a': 'x', 1: 'y', 2: 'y', 3: 'y'}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y'}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'b': 7}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'b': 8}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'b': 9}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'b': 'x'}
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'b': 'y'}

>>> for x in L:
	for y in t:
		d2[x]=y      #这与上面的途一样。分别从列表和元组抽取

		
>>> d2		#上面两种方法得到的结果随机性太大
{'a': 'y', 1: 'y', 2: 'y', 3: 'y', 'e': 'b', 'h': 'b', 'l': 'b', 'o': 'b', 'b': 'y'}

====================
##试验：分别从两个元组取数，构造一个新字典
>>> s='hello'
>>> L=[1,2,3,'a','b']
>>> t=(7,8,9,"x","y")
>>> d={'A':100,'B':200,"E":500,'C':300,"D":400}
>>> d2={}
>>> print t2
(77, 88, 99, 'xx', 'yy')
>>> t2
(77, 88, 99, 'xx', 'yy')
>>> t
(7, 8, 9, 'x', 'y')
>>> for a1 in t:
	for a2 in t2:
		d2[t]=t2

		
>>> d2
{(7, 8, 9, 'x', 'y'): (77, 88, 99, 'xx', 'yy')}		#只有1个键、一个值。失败
>>> d2.keys()
[(7, 8, 9, 'x', 'y')]
>>> d2.values()
[(77, 88, 99, 'xx', 'yy')]
>>> d2[(7,8,9,"x","y")]
(77, 88, 99, 'xx', 'yy')
>>> d2[7]

Traceback (most recent call last):
  File "<pyshell#89>", line 1, in <module>
    d2[7]
KeyError: 7
>>> d2['x']

Traceback (most recent call last):
  File "<pyshell#90>", line 1, in <module>
    d2['x']
KeyError: 'x'

=====================
##试验：分别从两个列表取数，构造一个新字典
>>> s='hello'
>>> L=[1,2,3,'a','b']
>>> d={'A':100,'B':200,"E":500,'C':300,"D":400}
>>> d2={}
>>> L2=['1','2','3','A','B']

#先复习一下列表的方法(对列表的操作)：
>>> L.insert(8,'c')		#在列表的下标8(即第九个)的位置，插入字符c
>>> L
[1, 2, 3, 'a', 'b', 'c']
>>> L
[1, 2, 3, 'a', 'b']
>>> L.insert(2,'X')		#将会在下标2的前面插入'X'
>>> L
[1, 2, 'X', 3, 'a', 'b']
>>> L
[1, 2, 3, 'a', 'b']
>>> L.remove(4)		#remove方法不可以按索引操作，要按值操作

Traceback (most recent call last):
  File "<pyshell#106>", line 1, in <module>
    L.remove(4)
ValueError: list.remove(x): x not in list

>>> L.remove('X')		#remove方法不可以按索引操作，要按值操作，成功删除
>>> L
[1, 2, 3, 'a', 'b']
>>> L.append('mm','nn')	#只能在全部元素的后面增加，且每次只能增加1个元素！

Traceback (most recent call last):
  File "<pyshell#126>", line 1, in <module>
    L.append('mm','nn')
TypeError: append() takes exactly one argument (2 given)
>>> L.append('mm')
>>> L
[1, 2, 3, 'a', 'b', 'mm']
>>> L.pop(5)		#按索引删除(也叫‘弹出’)，自动打印操作后的结果(即被删的)
'mm'
>>> L
[1, 2, 3, 'a', 'b']		#又恢复成原来的L啦啦！！继续下面的试验～

D1={44:'rr',55:'tt',66:"YY",77:"UU"}
L=[1, 2, 3, 'a', 'b']
L2=['1', '2', '3', 'A', 'B']